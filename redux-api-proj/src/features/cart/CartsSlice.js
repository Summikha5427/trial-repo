import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchItems, addItem, updateItem, deleteItem} from './CartsAPI';

const initialState = {
  items: [],
  status: 'idle',
};

export const CfetchAsync = createAsyncThunk(
  'cart/fetchitems', //action name
  async () => {
    const response = await fetchItems();
    // The value we return becomes the `fulfilled` action payload
    return response.data;    //axios returns the state in an aray of "data" by default
  }
);

export const addAsync = createAsyncThunk(
  'cart/additems', //action name
  async (item) => {
    const {id,title,description,price,thumbnail} = item;
    const response = await addItem({id,title,description,price,thumbnail,quantity:1});
    return response.data;    
  }
);

//its A front-end I guess
export const updateAsync = createAsyncThunk(
  'cart/updateItem', //action name
  //first dispatch call by us 
  async ({id,change}) => {  //very important:Async thunk need only one object ..it can include multiple parameters.we need "{}"
    const response = await updateItem(id,change);
    //second dispatch call when there is a change 
    console.log(response);
    return response.data;    
  }
);

export const deleteAsync = createAsyncThunk(
  'cart/deleteitem', //action name
  async (id) => {
    await deleteItem(id);
    return id;    
  }
);


export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(CfetchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(CfetchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items = action.payload;
      })
      .addCase(addAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items.push(action.payload);
      })

      .addCase(updateAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index = state.items.findIndex(item=>item.id===action.payload.id);
        console.log(index,action.payload);
        state.items.splice(index,1,action.payload);
      })

      .addCase(deleteAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index = state.items.findIndex(item=>item.id===action.payload);
        console.log(index);
        state.items.splice(index,1);
      })
  },
});

// export const { } = productsSlice.actions;

export default cartSlice.reducer;
