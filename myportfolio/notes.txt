//---Commands used 

1)npx create-react-app myportfolio --template redux ==> creatin the react app with default redux-toolkit
2)cd myportfolio => opening the react folder to create build the application
3)npm install --global yarn  => to use yarn as the pacakge-manager (usin according to the video)
4)yarn --version ==> checking the version of yarn 
5)yarn start => Starting the application
6)yarn add tailwindcss postcss autoprefixer ----installing the tailwind with prefixers in the associated folder.
7)npx tailwindcss init -p ==> to install the tailwind.config file
8) paste the contents in the config file as guided in the officail docs
9)Copy three lines in the index.css
10) install tailwindcss extension by tailwind labs as it helps tailwind snippets
11)install ES7+ React/Redux/React-Native for react snippets by - dsznajder
12)yarn add react-icons ==> installing react-icons (to have access to all react-icons) 
13)import {FaTimes,FaBars} from 'react-icons/fa';



//----sTart Coding
  * installing tailwind from official website of the tailwing 
    use the framwork to help the tailwind its the react app, so that it can provide the 
    required framwork according to the project 

  * JSX: 
    JSX allows you to write HTML-like code within your JavaScript (or TypeScript) code.

  *After creating a .jsx files , we can use "rafce" a short cut to create the fucntional component of accrding to the fielName


//----CODE: 

    Q)difference between h-[80px]  and h-80px
      in tailwind?

  =>The key difference is that h-[80px] allows you to use custom height values, whereas h-80px uses predefined values from Tailwind's height scale. The [...] notation is particularly useful 
    when you need to specify specific, non-standard pixel values for CSS properties. This customization capability was introduced in Tailwind CSS version 2 and is handy for tailoring styles to your specific design requirements.

//--form 
   =>getform.com 
      sumia2135@gmail.com

//react-scroll
  react-scroll => npmjs.com

{/* Links to elements inside a specific container */}
  ---> Creating a link fo the diiferent components in the page with sctolling event.

  import the link file from the react-scroll
   and link the components . Follow the docs if required.
  

----------Running React app

In a React application created with tools like create-react-app, the development and build processes often involve using a command-line interface (CLI) to execute various scripts and tasks. Here are a few reasons why running the application through the terminal is necessary:

1. **Development Server:**
   - When you run `npm start` or `yarn start` from the terminal, it typically starts a development server that serves your React application. This server provides features like hot module replacement, allowing you to see changes in real-time as you edit your code.

2. **Script Execution:**
   - The scripts specified in your `package.json` file, such as `"start": "react-scripts start"`, define the behavior of commands like `npm start`. These scripts often include configurations and settings that are essential for the development environment.

3. **Build Process:**
   - To create a production-ready build of your React application, you use the `npm run build` or `yarn build` command. This process involves optimizations, minification, and bundling of your code for better performance in a production environment.

4. **Dependencies and Environment Configuration:**
   - Running commands in the terminal allows you to take advantage of the npm or Yarn package managers to install and manage project dependencies. It also enables you to configure environmental variables or perform other setup tasks before running your application.

5. **Console Output and Logs:**
   - The terminal provides a console where you can see output, error messages, and logs generated by the development server or build process. This information is valuable for troubleshooting and understanding what's happening behind the scenes.

6. **Consistency Across Platforms:**
   - Using the terminal for development tasks ensures a consistent experience across different operating systems (Windows, macOS, Linux). It abstracts away platform-specific nuances, making it easier to share and collaborate on projects.

While you can technically open the HTML file directly in a browser, doing so won't provide the benefits of the development server, hot module replacement, and other features that streamline the development process. The command-line interface is an integral part of modern JavaScript development workflows and allows for efficient development, testing, and deployment of applications.


----------------