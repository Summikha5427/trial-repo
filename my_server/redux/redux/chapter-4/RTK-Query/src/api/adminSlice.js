import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Define a service using a base URL and expected endpoints
export const adminApi = createApi({
  reducerPath: "admin",
  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:8080/" }),
  endpoints: (builder) => ({
    getAccounts: builder.query({
      //query means when data need to read, otherwise mutation will be found
      query: () => `accounts`,
      // transformResponse : (response) => response.sort((a,b)=> b.id - a.id ),
      transformResponse : (response) => response.sort((a,b)=> b.amount - a.amount),
     providesTags: ["accounts"],
    }),
    addAccounts: builder.mutation({
      //query means when data need to read, otherwise mutation will be found
      query: (amount, id) => ({
        url: "accounts",
        method: "POST",
        body: { amount, id },
      }),
      invalidatesTags: ["accounts"],
    }),
    deleteAccount: builder.mutation({
      query: (id) => ({
        url: `accounts/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: ["accounts"],
    }),
    updateAccount : builder.mutation({
      query : ({id,amount}) =>({
        url : `accounts/${id}`,
        method : 'PATCH' ,
        body : {amount}
      }),
      invalidatesTags : ['accounts'],
    }),
  }),
});

// Export hooks for usage in functional components, which are
// auto-generated based on the defined endpoints
export const {
  useGetAccountsQuery,
  useAddAccountsMutation,
  useDeleteAccountMutation,
  useUpdateAccountMutation
} = adminApi; //custom hook that we create it using "use" keyword

//-----here we created a hook where "getAccount" is the middle name of the hook which matches the reducer at the top
// -----and "use" "Quesry is automatically generated by the RTK"
